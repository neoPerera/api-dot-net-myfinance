// <auto-generated />
using System;
using INFRASTRUCTURE.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace INFRASTRUCTURE.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CORE.Entities.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("str_id");

                    b.Property<string>("Active")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("str_active");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dtm_date");

                    b.Property<char>("IsMain")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasDefaultValue('N')
                        .HasColumnName("str_ismain");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("str_name");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("str_user");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("tbl_refmas_accounts", (string)null);
                });

            modelBuilder.Entity("CORE.Entities.Expense", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("str_id");

                    b.Property<string>("Active")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("str_active");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dtm_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("str_name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("tbl_refmas_expense", (string)null);
                });

            modelBuilder.Entity("CORE.Entities.Form", b =>
                {
                    b.Property<string>("FormId")
                        .HasColumnType("text")
                        .HasColumnName("str_form_id");

                    b.Property<char>("Active")
                        .HasColumnType("character(1)")
                        .HasColumnName("str_active");

                    b.Property<string>("Component")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("str_component");

                    b.Property<string>("FormName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("str_form_name");

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("str_icon");

                    b.Property<char>("IsMenu")
                        .HasColumnType("character(1)")
                        .HasColumnName("str_isMenu");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("str_link");

                    b.Property<string>("MenuId")
                        .HasColumnType("text")
                        .HasColumnName("str_menu_id");

                    b.HasKey("FormId");

                    b.HasIndex("FormId")
                        .IsUnique();

                    b.ToTable("tbl_forms", (string)null);
                });

            modelBuilder.Entity("CORE.Entities.Income", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("str_id");

                    b.Property<char>("Active")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("str_active");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dtm_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("str_name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("tbl_refmas_income", (string)null);
                });

            modelBuilder.Entity("CORE.Entities.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("str_id");

                    b.Property<string>("Account")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("str_account");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("int_amount");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dtm_date");

                    b.Property<string>("Reason")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("str_reason");

                    b.Property<string>("TrnCat")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("str_trn_cat");

                    b.Property<string>("TrnType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("str_trn_type");

                    b.Property<string>("User")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("str_user");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("tbl_trns", (string)null);
                });

            modelBuilder.Entity("CORE.Entities.TransactionRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("str_id");

                    b.Property<string>("Account")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("str_account");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("int_amount");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dtm_date");

                    b.Property<string>("Reason")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("str_reason");

                    b.Property<string>("TrnCat")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("str_trn_cat");

                    b.Property<string>("TrnType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("str_trn_type");

                    b.Property<string>("User")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("str_user");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("tbl_trns_records", (string)null);
                });

            modelBuilder.Entity("CORE.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("tbl_users", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
